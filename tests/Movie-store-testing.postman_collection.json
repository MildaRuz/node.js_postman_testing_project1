{
	"info": {
		"_postman_id": "66df3205-0078-4515-b59c-0fe112645b8f",
		"name": "Movie-store-testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34520621"
	},
	"item": [
		{
			"name": "Create and Delete testing",
			"item": [
				{
					"name": "POST new movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const reqData =JSON.parse(pm.request.body.raw)",
									"",
									"pm.environment.set(\"id\", responseData.id);",
									"pm.environment.set(\"title\", reqData.title);",
									"pm.environment.set(\"productionDate\", reqData.productionDate);",
									"pm.environment.set(\"producer\", reqData.producer);",
									"pm.environment.set(\"rating\", reqData.rating);",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has the required fields and gets what was send in request\", function () {",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('title').and.equals(reqData.title);",
									"    pm.expect(responseData).to.have.property('productionDate').and.equals(reqData.productionDate);",
									"    pm.expect(responseData).to.have.property('producer').and.equals(reqData.producer);",
									"    pm.expect(responseData).to.have.property('rating').and.equals(reqData.rating);",
									"});",
									"",
									"",
									"pm.test(\"Id should be a non-negative integer\", function () {",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(1, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Hachiko\",\n    \"productionDate\": \"2009-06-13\",\n    \"producer\": \"Richard Gere\",\n    \"rating\": 8.5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/movies",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - id, title, productionDate, producer, and rating and they are valid\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"    pm.expect(responseData.productionDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    pm.expect(responseData.producer).to.be.a('string').and.to.have.lengthOf.at.least(2, \"Producer should have at least 2 characters\")",
									"    pm.expect(responseData.rating).to.be.a('number');",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/movies/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(movie => {",
									"        pm.expect(movie).to.have.property('id');",
									"        pm.expect(movie).to.have.property('title');",
									"        pm.expect(movie).to.have.property('productionDate');",
									"        pm.expect(movie).to.have.property('producer');",
									"        pm.expect(movie).to.have.property('rating');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/movies",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/movies/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/movies/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/movies",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get movie by id and Edit testing",
			"item": [
				{
					"name": "POST new movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json()",
									"const reqData =JSON.parse(pm.request.body.raw)",
									"",
									"pm.environment.set(\"id\", responseData.id);",
									"pm.environment.set(\"title\", reqData.title);",
									"pm.environment.set(\"productionDate\", reqData.productionDate);",
									"pm.environment.set(\"producer\", reqData.producer);",
									"pm.environment.set(\"rating\", reqData.rating);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Hachiko\",\n    \"productionDate\": \"2009-06-13\",\n    \"producer\": \"Richard Gere\",\n    \"rating\": 8.5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/movies",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const reqData =JSON.parse(pm.request.body.raw)",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response schema for the updated movie\", function () {",
									"",
									"   pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('title').and.equals(reqData.title);",
									"    pm.expect(responseData).to.have.property('productionDate').and.equals(reqData.productionDate);",
									"    pm.expect(responseData).to.have.property('producer').and.equals(reqData.producer);",
									"    pm.expect(responseData).to.have.property('rating').and.equals(reqData.rating);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Hachiko\",\n    \"productionDate\": \"2009-06-13\",\n    \"producer\": \"Richard Gere\",\n    \"rating\": 9.5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/movies/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/movies/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all movies after edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/movies",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE movie by id",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/movies/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"movies",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}